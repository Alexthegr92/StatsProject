for (i in 1:n) {
x[i+1]~dnorm(mu+alpha*(x[i]-mu),tau)
y[i]~dpois(exp(x[i+1]))
}
mu~dnorm(0,0.001)
alpha~dnorm(0,0.0001)
tau~dgamma(1,0.001)
}
"
model=jags.model(textConnection(modelS),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("alpha","mu","tau"),n.iter=10000,thin=1)
print(summary(output))
plot(output)
#how many observations are needed to identify the params to a high degree of precision?
set.seed(1)
Z=matrix(rnorm(1000*8,3.1,0.1),nrow=8)
RE=rnorm(8,0,0.01)
X=t(Z+RE)
colnames(X)=paste("Uni",1:8,sep="")
Data=stack(data.frame(X))
boxplot(exp(values)~ind,data=Data,notch=TRUE)
View(Data)
Y[i,j] = mu + theta[i] + eps[i,j]
mod = lm(values~ind, data=Data)
summary(mod)
options(contrasts=rep("contr.sum",2))
mods=lm(values~ind,data=Data)
summary(mods)
require(rjags)
n=dim(X)[1]
p=dim(X)[2]
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
theta[j]~dnorm(0,0.0001)
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau)
}
}
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
autocorr.plot(output)
pairs(as.matrix(output))
crosscorr.plot(output)
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau)
}
}
theta[1]<-0
for (j in 2:p) {
theta[j]~dnorm(0,0.0001)
}
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
autocorr.plot(output)
crosscorr.plot(output)
N=n*p
data=list(y=Data$values,g=Data$ind,N=N,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (i in 1:N) {
y[i]~dnorm(mu+theta[g[i]],tau)
}
theta[1]<-0
for (j in 2:p) {
theta[j]~dnorm(0,0.0001)
}
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau)
}
}
for (j in 1:(p-1)) {
theta[j]~dnorm(0,0.0001)
}
theta[p] <- -sum(theta[1:(p-1)])
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
theta[j]~dnorm(0,taut)
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau)
}
}
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
taut~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","taut","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
apply(as.matrix(output),2,mean)
RE
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
theta[j]~dnorm(0,7000)
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau)
}
}
mu~dnorm(0,0.0001)
tau~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
data=list(X=X,n=n,p=p)
init=list(mu=2,tau=1)
modelstring="
model {
for (j in 1:p) {
theta[j]~dnorm(0,taut)
tau[j]~dgamma(1,0.0001)
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau[j])
}
}
mu~dnorm(0,0.0001)
taut~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","taut","theta"),n.iter=100000,thin=10)
data=list(X=X,n=n,p=p)
init=list(mu=2)
modelstring="
model {
for (j in 1:p) {
theta[j]~dnorm(0,taut)
tau[j]~dgamma(1,0.0001)
for (i in 1:n) {
X[i,j]~dnorm(mu+theta[j],tau[j])
}
}
mu~dnorm(0,0.0001)
taut~dgamma(1,0.0001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("mu","tau","taut","theta"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
n = c(47,148,119,810,211,196,148,215,207,97,256,360)
r = c(0,18,8,46,8,13,9,31,14,8,29,25)
ops = c(47,148,119,810,211,196,148,215,207,97,256,360)
rm(n)
X = r/ops
n=12
X = t(r/ops)
View(X)
colnames(X)=paste("Hospital",1:12,sep="")
View(X)
n = c(47,148,119,810,211,196,148,215,207,97,256,360)
r = c(0,18,8,46,8,13,9,31,14,8,29,25)
p = t(r/ops)
colnames(p)=paste("Hospital",1:12,sep="")
p = t(r/n)
colnames(p)=paste("Hospital",1:12,sep="")
data=list(n=n,p=p,r=r)
init=list(mu=-2,tau=2)
modelstring="
model {
for (i in 1:12) {
r[i]~dbin(p[i],n[i])
logit(p[i])<-b[i]
b[i]~dnorm(mu,tau)
}
mu~dnorm(0.0,1.0E-6)
tau~dgamma(0.001,0.001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
data=list(n=n,r=r)
init=list(mu=-2,tau=2)
modelstring="
model {
for (i in 1:12) {
r[i]~dbin(p[i],n[i])
logit(p[i])<-b[i]
b[i]~dnorm(mu,tau)
}
mu~dnorm(0.0,1.0E-6)
tau~dgamma(0.001,0.001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("n","p","r"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
data=list(n=n,r=r)
init=list(mu=-2,tau=2)
modelstring="
model {
for (i in 1:12) {
r[i]~dbin(p[i],n[i])
logit(p[i])<-b[i]
b[i]~dnorm(mu,tau)
}
mu~dnorm(0.0,1.0E-6)
tau~dgamma(0.001,0.001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("b"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
plot(output)
data=list(n=n,r=r)
init=list(mu=-2,tau=20)
modelstring="
model {
for (i in 1:12) {
r[i]~dbin(p[i],n[i])
logit(p[i])<-b[i]
b[i]~dnorm(mu,tau)
}
mu~dnorm(0.0,1.0E-6)
tau~dgamma(0.001,0.001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=1000)
output=coda.samples(model=model,variable.names=c("b"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
data=list(n=n,r=r)
init=list(mu=-2,tau=20)
modelstring="
model {
for (i in 1:12) {
r[i]~dbin(p[i],n[i])
logit(p[i])<-b[i]
b[i]~dnorm(mu,tau)
}
mu~dnorm(0.0,1.0E-6)
tau~dgamma(0.001,0.001)
}
"
model=jags.model(textConnection(modelstring),data=data,inits=init)
update(model,n.iter=2000)
output=coda.samples(model=model,variable.names=c("b"),n.iter=100000,thin=10)
print(summary(output))
plot(output)
gibbs=function(N,thin)
{
mat=matrix(0,ncol=3,nrow=N)
mat[,1]=1:N
x=0
y=0
for (i in 1:N) {
for (j in 1:thin) {
x=rgamma(1,3,y*y+4)
y=rnorm(1,1/(x+1),1/sqrt(2*x+2))
}
mat[i,2:3]=c(x,y)
}
mat=data.frame(mat)
names(mat)=c("Iter","x","y")
mat
}
writegibbs=function(N=50000,thin=1000)
{
mat=gibbs(N,thin)
write.table(mat,"data.tab",row.names=FALSE)
}
writegibbs()
View(writegibbs)
fun=function(x,y)
{
x*x*exp(-x*y*y-y*y+2*y-4*x)
}
compare<-function(file="data.tab")
{
mat=read.table(file,header=TRUE)
op=par(mfrow=c(2,1))
x=seq(0,3,0.1)
y=seq(-1,3,0.1)
z=outer(x,y,fun)
contour(x,y,z,main="Contours of actual (unnormalised) distribution")
require(KernSmooth)
fit=bkde2D(as.matrix(mat[,2:3]),c(0.1,0.1))
contour(fit$x1,fit$x2,fit$fhat,main="Contours of empirical distribution")
par(op)
print(summary(mat[,2:3]))
}
compare()
library(ElemStatLearn)
data("marketing")
head(data)
head(marketing)
?marketing
marketing[na.omit,]
na.omit(marketing)
marketing = na.omit(marketing)
mod1 = lm(income~., data=marketing)
mod1 = lm(Income~., data=marketing)
summary(mod1)
sexf = factor(marketing$Sex)
sex = factor(marketing$Sex)
rm(sexf)
marital = factor(marketing$Marital)
income = marketing$income
income = marketing$Income
marketing$Sex = factor(marketing$Sex)
marketing$Marital = factor(marketing$Marital)
marketing$Occupation = factor(marketing$Occupation)
marketing$Dual_Income = factor(marketing$Dual_Income)
marketing$Status = factor(marketing$Status)
marketing$Home_Type = factor(marketing$Home_Type)
marketing$Ethnic = factor(marketing$Ethnic)
marketing$Language = factor(marketing$Language)
rm(income)
rm(marital)
rm(sex)
mod1 = lm(Income~. , data=marketing)
summary(mod1)
data("marketing")
marketing = na.omit(marketing)
mod1 = lm(Income~. , data=marketing)
summary(mod1)
marketing$Sex = factor(marketing$Sex)
marketing$Marital = factor(marketing$Marital)
marketing$Occupation = factor(marketing$Occupation)
marketing$Dual_Income = factor(marketing$Dual_Income)
marketing$Status = factor(marketing$Status)
marketing$Home_Type = factor(marketing$Home_Type)
marketing$Ethnic = factor(marketing$Ethnic)
marketing$Language = factor(marketing$Language)
anova1 = aov(Income~., data=marketing)
summary(anova1)
plot(marketing)
plot(Income, data=marketing)
plot(marketing$Income)
plot(marketing$sex)
plot(marketing$Sex)
boxplot(marketing$Sex)
marketing$Sex = factor(marketing$Sex)
marketing$Marital = factor(marketing$Marital)
marketing$Occupation = factor(marketing$Occupation)
marketing$Dual_Income = factor(marketing$Dual_Income)
marketing$Status = factor(marketing$Status)
marketing$Home_Type = factor(marketing$Home_Type)
marketing$Ethnic = factor(marketing$Ethnic)
marketing$Language = factor(marketing$Language)
View(marketing)
plot(marketing$Sex)
plot(marketing$Sex, Income)
plot(marketing$Sex, marketing$Income)
plot(marketing$Marital, marketing$Income)
plot(marketing$Occupation, marketing$Income)
plot(marketing$Dual_Income, marketing$Income)
plot(marketing$Status, marketing$Income)
plot(marketing$Home_Type, marketing$Income)
plot(marketing$Ethnic, marketing$Income)
plot(marketing$Language, marketing$Income)
plot(marketing$Language, marketing$Income, main="language")
plot(marketing$Sex, marketing$Income, main="sex")
plot(marketing$Marital, marketing$Income, main="marital")
plot(marketing$Occupation, marketing$Income, main="occupation")
plot(marketing$Dual_Income, marketing$Income, main="dual income")
plot(marketing$Status, marketing$Income, main="status")
plot(marketing$Home_Type, marketing$Income, main="home type")
plot(marketing$Ethnic, marketing$Income, main="ethnic")
plot(marketing$Language, marketing$Income, main="language")
summary(mod1)
pairs(output)
load("~/Documents/MAS8381/StatsProjects/StatsProject/Renv-tidy-with-missing-data.RData")
setwd("~/Documents/MAS8381/StatsProjects/StatsProject")
source("./data-tidying.R")
library(leaps)
install.packages(c("ElemStatLearn","ggplot2","ISLR","smfsb","car","leaps","glmnet","pls","rbenchmark","faraway"))
install.packages(c("rJava","rscala"))
library(ElemStatLearn)
library(leaps)
library(glmnet)
library(rjags)
library(mice)
install.packages("mice")
pairs(output)
pairs(as.matrix(output))
pairs(as.matrix(output))
corr(output)
cor(output)
cor(as.matrix(output))
crosscorr.plot(output)
load("~/Documents/MAS8381/StatsProjects/StatsProject/Renv-second-attempt-with-missing-data")
rm(Hitters)
rm(betacheck)
rm(eps)
rm(eta)
rm(modelS)
save.image("~/Documents/MAS8381/StatsProjects/StatsProject/Renv-second-attempt-tidy-with-missing-data.RData")
print(summary(output))
plot(output)
load("~/Documents/MAS8381/StatsProjects/StatsProject/Renv-tidy-with-missing-data.RData")
plot(output)
beta=2^(0:(1-p))
rm(betacheck)
save.image("~/Documents/MAS8381/StatsProjects/StatsProject/Renv-tidy-with-missing-data.RData")
source("./data-tidying.R")
plot(marketing$Sex, marketing$Income, xlab="sex", ylab="Income")
plot(marketing$Marital, marketing$Income, xlab="marital", ylab="Income")
plot(marketing$Occupation, marketing$Income, xlab="occupation", ylab="Income")
plot(marketing$Dual_Income, marketing$Income, xlab="dual income", ylab="Income")
plot(marketing$Status, marketing$Income, xlab="status", ylab="Income")
plot(marketing$Home_Type, marketing$Income, xlab="home type", ylab="Income")
plot(marketing$Ethnic, marketing$Income, xlab="ethnic", ylab="Income")
plot(marketing$Language, marketing$Income, xlab="language", ylab="Income")
par(mfrow=c(3,3))
plot(marketing$Sex, marketing$Income, xlab="sex", ylab="Income")
plot(marketing$Marital, marketing$Income, xlab="marital", ylab="Income")
plot(marketing$Occupation, marketing$Income, xlab="occupation", ylab="Income")
plot(marketing$Dual_Income, marketing$Income, xlab="dual income", ylab="Income")
plot(marketing$Status, marketing$Income, xlab="status", ylab="Income")
plot(marketing$Home_Type, marketing$Income, xlab="home type", ylab="Income")
plot(marketing$Ethnic, marketing$Income, xlab="ethnic", ylab="Income")
plot(marketing$Language, marketing$Income, xlab="language", ylab="Income")
continuousPlots = function(variable, name) {
par(mfrow=c(1,2), xpd=NA)
for( i in 1:9) {
hist(variable[marketing$Income==i], xlab=name, breaks = seq(min(variable),
max(variable), by=0.5), xlim = c(min(variable), max(variable)), border=i, ylim=c(0,1.7),
freq=FALSE, main=NULL)
par(new=TRUE)
}
legend(max(variable)+0.2,1.5, paste(1:9), lty=1, col=1:9, ncol=1,title = "Income level")
par(mfrow=c(1,1), new=FALSE)
}
continuousPlots(marketing$Age, "Age")
continuousPlots(marketing$Edu, "Edu")
continuousPlots(marketing$Lived, "Lived")
# doesnt seem significant in plots
continuousPlots(marketing$Household, "Household")
continuousPlots(marketing$Householdu18, "Householdu18")
crosscorr.plot(output)
par(mfrow=c(2,2))
plot(marketing$Sex, marketing$Income, xlab="sex", ylab="Income")
plot(marketing$Marital, marketing$Income, xlab="marital", ylab="Income")
plot(marketing$Occupation, marketing$Income, xlab="occupation", ylab="Income")
plot(marketing$Dual_Income, marketing$Income, xlab="dual income", ylab="Income")
plot(marketing$Status, marketing$Income, xlab="status", ylab="Income")
plot(marketing$Home_Type, marketing$Income, xlab="home type", ylab="Income")
plot(marketing$Ethnic, marketing$Income, xlab="ethnic", ylab="Income")
plot(marketing$Language, marketing$Income, xlab="language", ylab="Income")
continuousPlots(marketing$Age, "Age")
continuousPlots(marketing$Edu, "Edu")
continuousPlots(marketing$Lived, "Lived")
continuousPlots(marketing$Household, "Household")
continuousPlots(marketing$Householdu18, "Householdu18")
?mice
View(marketing)
?marketing
